import math
import argparse
from pathlib import Path
import numpy as np


def _centre_data(data: np.ndarray) -> tuple[np.ndarray, np.ndarray]:
    """
    Centre the data by subtracting the mean.
    """
    #centre = np.mean(data, axis=0)
    #print("center: ")
    #print(centre)
    centre = np.array([0.16672021, 0.11700719, 0.013227397, 0.09305186, -0.029422699, 0.17622353, 0.4267106, -0.297038, 0.13915674, 0.38441318, -0.486725, -0.15987667, -0.19712289, 0.1349074, -0.19016947, -0.026179956, 0.4129807, 0.14325741, -0.09106042, 0.06876218, -0.19389102, 0.4467732, 0.03169017, -0.066950575, -0.044301506, -0.0059755715, -0.33196586, 0.18213534, -0.25065416, 0.30251458, 0.3448419, -0.14900115, -0.07782894, 0.3568707, -0.46595258, 0.37295088, -0.088741764, 0.17248306, -0.0072736046, 0.32928637, 0.13216197, 0.032092985, 0.21553043, 0.016091486, 0.31958902, 0.0133126, 0.1579258, 0.018537233, 0.046248164, -0.0048194043, -0.2184672, -0.26273906, -0.110678785, -0.04542999, -0.41625032, 0.46025568, -0.16116948, 0.4091706, 0.18427321, 0.004736977, 0.16289745, -0.05330932, -0.2694863, -0.14762327, 0.17744702, 0.2445075, 0.14377175, 0.37390858, 0.16165806, 0.17177118, 0.097307935, 0.36326465, 0.23221572, 0.15579978, -0.065486655, -0.29006517, -0.009194494, 0.009019374, 0.32154799, -0.23186184, 0.46485493, -0.110756285, -0.18604982, 0.35027295, 0.19815539, 0.47386464, -0.031379268, 0.124035835, 0.11556784, 0.4304302, -0.24455063, 0.1816723, 0.034300473, -0.034347706, 0.040140998, 0.1389901, 0.22840638, -0.19911191, 0.07563166, -0.2744902, 0.13114859, -0.23862572, -0.31404558, 0.41355187, 0.12970817, -0.35403475, -0.2714075, 0.07231573, 0.043893218, 0.30324167, 0.38928393, -0.1567055, -0.0083288215, 0.0487653, 0.12073729, -0.01582117, 0.13381198, -0.084824145, -0.15329859, -1.120622, 0.3972598, 0.36022213, -0.29826534, -0.09468781, 0.03550699, -0.21630692, 0.55655843, -0.14842057, 0.5924833, 0.38791573, 0.1502777, 0.111737385, 0.1926823, 0.66021144, 0.25601995, 0.28220543, 0.10194068, 0.013066262, -0.09348819, -0.24085014, -0.17843121, -0.012598432, 0.18757571, 0.48543528, -0.059388146, 0.1548026, 0.041945867, 0.3322589, 0.012830887, 0.16621992, 0.22606649, 0.13959105, -0.16688728, 0.47194278, -0.12767595, 0.037815034, 0.441938, 0.07875027, 0.08625042, 0.053454693, 0.74093896, 0.34662113, 0.009829135, -0.033400282, 0.030965377, 0.17645596, 0.083803624, 0.32578796, 0.49538168, -0.13212465, -0.39596975, 0.109529115, 0.2815771, -0.051440604, 0.21889819, 0.25598505, 0.012208843, -0.012405662, 0.3248759, 0.00997502, 0.05999008, 0.03562817, 0.19007418, 0.24805716, 0.5926766, 0.26937613, 0.25856, -0.05798439, -0.29168302, 0.14050555, 0.084851265, -0.03763504, 0.8265359, -0.23383066, -0.042164285, 0.19120507, -0.12189065, 0.3864055, -0.19823311, 0.30280992, 0.10814344, -0.164514, -0.22905481, 0.13680641, 0.4513772, -0.514546, -0.061746247, 0.11598224, -0.23093395, -0.09735358, 0.02767051, 0.11594536, 0.17106244, 0.21301728, -0.048222974, 0.2212131, -0.018857865, -0.09783516, 0.42156664, -0.14032331, -0.103861615, 0.4190284, 0.068923555, -0.015083771, 0.083590426, -0.15759592, -0.19096768, -0.4275228, 0.12626286, 0.12192557, 0.4157616, 0.048780657, 0.008426048, -0.0869124, 0.054927208, 0.28417027, 0.29765493, 0.09203619, -0.14446871, -0.117514975, 0.30662632, 0.24904715, -0.19551662, -0.0045785015, 0.4217626, -0.31457824, 0.23381722, 0.089111514, -0.27170828, -0.06662652, 0.10011391, -0.090274535, 0.101849966, 0.26554734, -0.1722843, 0.23296228, 0.25112453, -0.16790418, 0.010348314, 0.05061285, 0.38003662, 0.0804625, 0.3450673, 0.364368, -0.2529952, -0.034065288, 0.22796603, 0.5457553, 0.11120353, 0.24596325, 0.42822433, -0.19215727, -0.06974534, 0.19388479, -0.17598474, -0.08769705, 0.12769659, 0.1371616, -0.4636819, 0.16870509, 0.14217548, 0.04412187, -0.20930687, 0.0075530168, 0.10065227, 0.45334083, -0.1097471, -0.11139921, -0.31835595, -0.057386875, 0.16285825, 0.5088513, -0.06318843, -0.34759882, 0.21132466, 0.33609292, 0.04858872, -0.058759, 0.22845529, -0.07641319, 0.5452827, -0.5050389, 0.1788054, 0.37428045, 0.066334985, -0.28162515, -0.15629752, 0.33783385, -0.0832242, 0.29144394, 0.47892854, -0.47006592, -0.07867588, 0.3872869, 0.28053126, 0.52399015, 0.21979983, 0.076880336, 0.47866163, 0.252952, -0.1323851, -0.22225754, -0.38585815, 0.12967427, 0.20340872, -0.326928, 0.09636557, -0.35929212, 0.5413311, 0.019960884, 0.33512768, 0.15133342, -0.14124066, -0.1868793, -0.07862198, 0.22739467, 0.19598985, 0.34314656, -0.05071516, -0.21107961, 0.19934991, 0.04822684, 0.15060754, 0.26586458, -0.15528078, 0.123646654, 0.14450715, -0.12574252, 0.30608323, 0.018549249, 0.36323825, 0.06762097, 0.08562406, -0.07863075, 0.15975896, 0.008347004, 0.37931192, 0.22957338, 0.33606857, -0.25204057, 0.18126069, 0.41903302, 0.20244692, -0.053850617, 0.23088565, 0.16085246, 0.1077502, -0.12445943, 0.115779735, 0.124704875, 0.13076028, -0.11628619, -0.12580182, 0.065204754, -0.26290357, -0.23539798, -0.1855292, 0.39872098, 0.44495568, 0.05491784, 0.05135692, 0.624011, 0.22839564, 0.0022447354, -0.27169296, -0.1694988, -0.19106841, 0.0110123325, 0.15464798, -0.16269256, 0.04033836, -0.11792753, 0.17172396, -0.08912173, -0.30929542, -0.03446989, -0.21738084, 0.39657044, 0.33550346, -0.06839139, 0.053675443, 0.33783767, 0.22576828, 0.38280004, 4.1448855, 0.14225426, 0.24038498, 0.072373435, -0.09465926, -0.016144043, 0.40864578, -0.2583055, 0.031816103, 0.062555805, 0.06068663, 0.25858644, -0.10598804, 0.18201788, -9.0025424E-4, 0.085680895, 0.4304161, 0.028686283, 0.027298616, 0.27473378, -0.3888415, 0.44825438, 0.3600378, 0.038944595, 0.49292335, 0.18556066, 0.15779617, 0.29989767, 0.39233804, 0.39759228, 0.3850708, -0.0526475, 0.18572918, 0.09667526, -0.36111078, 0.3439669, 0.1724522, 0.14074509, 0.26097745, 0.16626832, -0.3062964, -0.054877423, 0.21702516, 0.4736452, 0.2298038, -0.2983771, 0.118479654, 0.35940516, 0.12212727, 0.17234904, 0.30632678, 0.09207966, -0.14084268, -0.19737118, 0.12442629, 0.52454203, 0.1266684, 0.3062802, 0.121598125, -0.09156268, 0.11491686, -0.105715364, 0.19831072, 0.061421417, -0.41778997, 0.14488487, 0.023310646, 0.27257463, 0.16821945, -0.16702746, 0.263203, 0.33512688, 0.35117313, -0.31740817, -0.14203706, 0.061256267, -0.19764185, 0.04822579, -0.0016218472, -0.025792575, 0.4885193, -0.16942391, -0.04156327, 0.15908112, -0.06998626, 0.53907114, 0.10317832, -0.365468, 0.4729886, 0.14291425, 0.32812154, -0.0273262, 0.31760117, 0.16925456, 0.21820979, 0.085142255, 0.16118735, -3.7089362, 0.251577, 0.18394576, 0.027926167, 0.15720351, 0.13084261, 0.16240814, 0.23045056, -0.3966458, 0.22822891, -0.061541352, 0.028320132, -0.14736478, 0.184569, 0.084853746, 0.15172474, 0.08277542, 0.27751622, 0.23450488, -0.15349835, 0.29665688, 0.32045734, 0.20012043, -0.2749372, 0.011832386, 0.05976605, 0.018300122, -0.07855043, -0.075900674, 0.0384252, -0.15101928, 0.10922137, 0.47396383, -0.1771141, 0.2203417, 0.33174303, 0.36640546, 0.10906258, 0.13765177, 0.2488032, -0.061588854, 0.20347528, 0.2574979, 0.22369152, 0.18777567, -0.0772263, -0.1353299, 0.087077625, -0.05409276, 0.027534787, 0.08053508, 0.3403908, -0.15362988, 0.07499862, 0.54367846, -0.045938436, 0.12206868, 0.031069376, 0.2972343, 0.3235321, -0.053970363, -0.0042564687, 0.21447177, 0.023565233, -0.1286087, -0.047359955, 0.23021339, 0.059837278, 0.19709614, -0.17340347, 0.11572943, 0.21720429, 0.29375625, -0.045433592, 0.033339307, 0.24594454, -0.021661613, -0.12823369, 0.41809165, 0.093840264, -0.007481906, 0.22441079, -0.45719734, 0.2292629, 2.675806, 0.3690025, 2.1311781, 0.07818368, -0.17055893, 0.3162922, -0.2983149, 0.21211359, 0.037087034, 0.021580033, 0.086415835, 0.13541797, -0.12453424, 0.04563163, -0.082379065, -0.15938349, 0.38595748, -0.8796574, -0.080991246, 0.078572094, 0.20274459, 0.009252143, -0.12719384, 0.105845824, 0.1592398, -0.08656061, -0.053054806, 0.090986334, -0.02223379, -0.18215932, -0.018316114, 0.1806707, 0.24788831, -0.041049056, 0.01839475, 0.19160001, -0.04827654, 4.4070687, 0.12640671, -0.11171499, -0.015480781, 0.14313947, 0.10024215, 0.4129662, 0.038836367, -0.030228542, 0.2948598, 0.32946473, 0.2237934, 0.14260699, -0.044821896, 0.23791742, 0.079720296, 0.27059034, 0.32129505, 0.2725177, 0.06883333, 0.1478041, 0.07598411, 0.27230525, -0.04704308, 0.045167264, 0.215413, 0.20359069, -0.092178136, -0.09523752, 0.21427691, 0.10512272, 5.1295033, 0.040909242, 0.007160441, -0.192866, -0.102640584, 0.21103396, -0.006780398, -0.049653083, -0.29426834, -0.0038102255, -0.13842082, 0.06620181, -0.3196518, 0.33279592, 0.13845938, 0.16162738, -0.24798508, -0.06672485, 0.195944, -0.11957207, 0.44237947, -0.07617347, 0.13575341, -0.35074243, -0.093798876, 0.072853446, -0.20490398, 0.26504788, -0.046076056, 0.16488416, 0.36007464, 0.20955376, -0.3082038, 0.46533757, -0.27326992, -0.14167665, 0.25017953, 0.062622115, 0.14057694, -0.102370486, 0.33898357, 0.36456722, -0.10120469, -0.27838466, -0.11779602, 0.18517569, -0.05942488, 0.076405466, 0.007960496, 0.0443746, 0.098998964, -0.01897129, 0.8059487, 0.06991939, 0.26562217, 0.26942885, 0.11432197, -0.0055776504, 0.054493718, -0.13086213, 0.6841702, 0.121975765, 0.02787146, 0.29039973, 0.30943078, 0.21762547, 0.28751117, 0.027524523, 0.5315654, -0.22451901, -0.13782433, 0.08228316, 0.07808882, 0.17445615, -0.042489477, 0.13232234, 0.2756272, -0.18824948, 0.14326479, -0.119312495, 0.011788091, -0.22103515, -0.2477118, -0.10513839, 0.034028634, 0.10693818, 0.03057979, 0.04634646, 0.2289361, 0.09981585, 0.26901972, 0.1561221, -0.10639886, 0.36466748, 0.06350991, 0.027927283, 0.11919768, 0.23290513, -0.03417105, 0.16698854, -0.19243467, 0.28430334, 0.03754995, -0.08697018, 0.20413163, -0.27218238, 0.13707504, -0.082289375, 0.03479585, 0.2298305, 0.4983682, 0.34522808, -0.05711886, -0.10568684, -0.07771385])
    return centre, data - centre


def _normalize(data: np.ndarray) -> np.ndarray:
    """
    Normalize the data.
    """
    if len(data.shape) == 1:
        return data / np.linalg.norm(data)
    return data / np.linalg.norm(data, axis=1)[:, None]


def _binarize(data: np.ndarray) -> np.ndarray:
    """
    Convert the data to a bit vector.
    """
    return np.array(
        data > 0, dtype=np.float32
    )  # Don't really care about packing properly


def _quantize(
    q: np.ndarray, num_bits: int, rng: np.random.Generator
) -> tuple[float, float, np.ndarray]:
    """
    Quantize the query.
    """
    u = [0.5]*768
    m = 2**num_bits - 1
    v_l = np.min(q)
    v_u = np.max(q)
    delta = (v_u - v_l) / m
    return (
        v_l,
        v_u,
        np.floor((q - v_l) / delta + u, dtype=np.float32), #np.floor((q - v_l) / delta + rng.uniform(0.0, 1.0), dtype=np.float32),
    )  # Don't care about packing properly here


def normalized_residual_dot(q: np.ndarray, o_r: np.ndarray) -> tuple[np.ndarray, np.ndarray]:
    """
    Compute the corrected dot product.
    """

    d = len(q)
    sqrt_d = math.sqrt(d)

    centre, o = _centre_data(o_r)
    o = _normalize(o)
    q = q - centre
    q = _normalize(q)

    x_b = _binarize(o)
    v_l, v_u, q_u = _quantize(q, 4, np.random.Generator(np.random.PCG64()))

    print(o)
    print(x_b)
    print(sqrt_d)

    o_o_q = (o * (2 * x_b - 1)).sum(axis=1) / sqrt_d

    dot_q = np.dot(q_u, x_b.T)

    delta = (v_u - v_l) / (2**4 - 1)

    print(delta)
    print(sqrt_d)
    print(dot_q)
    print(v_l)
    print(x_b.sum(axis=1))
    print(q_u.sum())
    print(o_o_q)

    # Undo the scaling and shifting applied to the query and the data.
    est_dot = (
        2 * delta / sqrt_d * dot_q
        + 2 * v_l / sqrt_d * x_b.sum(axis=1)
        - delta / sqrt_d * q_u.sum()
        - sqrt_d * v_l
    ) / o_o_q

    return est_dot, centre

def mip(q: np.ndarray, o_r: np.ndarray) -> tuple[np.ndarray, np.ndarray]:
    """
    Compute the corrected maximum inner product.
    """

    true_dot = np.dot(q, o_r.T)

    est_dot, centre = normalized_residual_dot(q, o_r)

    q_n = np.linalg.norm(q - centre)
    o_n = np.linalg.norm(o_r - centre, axis=1)

    print(q_n)
    print(o_n)
    print(est_dot)
    print(np.dot(centre, o_r.T))
    print(np.dot(q, centre))
    print(np.dot(centre, centre))

    est_dot_mip = (
        q_n * o_n * est_dot
        + np.dot(centre, o_r.T)
        + np.dot(q, centre)
        - np.dot(centre, centre)
    )

    return true_dot, est_dot_mip

def fvecs_read(filename, c_contiguous=True):
    fv = np.fromfile(filename, dtype=np.float32)
    if fv.size == 0:
        return np.zeros((0, 0))
    dim = fv.view(np.int32)[0]
    assert dim > 0
    fv = fv.reshape(-1, 1 + dim)
    if not all(fv.view(np.int32)[:, 0] == dim):
        raise IOError("Non-uniform vector sizes in " + filename)
    fv = fv[:, 1:]
    if c_contiguous:
        fv = fv.copy()
    return fv


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Compute the corrected maximum inner product.")
    parser.add_argument("--query-file", type=str, help="The query vectors file.")
    parser.add_argument("--docs-file", type=str, help="The docs vectors file.")
    parser.add_argument("--top-k", type=int, default=10, help="The top-k value (default 10).")
    parser.add_argument("--rerank-multiple", type=int, default=5, help="The multiple to rerank (default 5).")
    args = parser.parse_args()

    Path(args.query_file).resolve(strict=True)
    Path(args.docs_file).resolve(strict=True)

    q = fvecs_read(args.query_file)
    o = fvecs_read(args.docs_file)

    print(mip(q[0], o))

#    k = args.top_k
#    m = args.rerank_multiple * k

#    recalls = []
#    for i in tqdm(range(min(30, len(q))), desc="Calculating recall"):
#        true_dot, est_dot_mip = mip(q[i,:], o)

#        reranked = np.argpartition(true_dot, -k)[-k:]
#        top_k = np.argpartition(est_dot_mip, -m)[-m:]

#        recalls.append(len(set(reranked).intersection(set(top_k)))*100/k)

#    print(f"Recall@{k}|{m}: {np.mean(recalls)}")

